# n8n + Supabase Docker Self-Hosting ÌôòÍ≤Ω
# ÏûëÏÑ±Ïûê: n8n_Supabase ÌîÑÎ°úÏ†ùÌä∏
# ÏµúÏã† ÏóÖÎç∞Ïù¥Ìä∏: 2024-12-26

services:
  # ========================================
  # ÔøΩÔøΩÔ∏è PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ (Supabase)
  # ========================================
  supabase:
    image: supabase/postgres:15.8.1.095
    container_name: supabase_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_postgres_password}
      POSTGRES_MULTIPLE_DATABASES: n8n,supabase
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - supabase_network

  # ========================================
  # üîÑ Redis (Supabase ÏÑ∏ÏÖò Í¥ÄÎ¶¨)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: supabase_redis
    restart: unless-stopped
    environment:
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - supabase_network

  # ========================================
  # üîê Supabase Auth (GoTrue)
  # ========================================
  auth:
    image: supabase/gotrue:v2.151.0
    container_name: supabase_auth
    restart: unless-stopped
    depends_on:
      supabase:
        condition: service_healthy
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL:-http://localhost:8000}
      
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-your_secure_postgres_password}@supabase:5432/${POSTGRES_DB:-postgres}?search_path=auth
      
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS:-}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}
      
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY:-3600}
      GOTRUE_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters}
      
      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP:-true}
      GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: ${ENABLE_ANONYMOUS_USERS:-false}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM:-false}
      
      # SMTP ÏÑ§Ï†ï
      GOTRUE_SMTP_HOST: ${SMTP_HOST:-}
      GOTRUE_SMTP_PORT: ${SMTP_PORT:-587}
      GOTRUE_SMTP_USER: ${SMTP_USER:-}
      GOTRUE_SMTP_PASS: ${SMTP_PASS:-}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL:-}
      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE:-/auth/v1/verify}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION:-/auth/v1/verify}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY:-/auth/v1/verify}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE:-/auth/v1/verify}
      
      # ÏÜåÏÖú Î°úÍ∑∏Ïù∏ ÏÑ§Ï†ï
      GOTRUE_EXTERNAL_GOOGLE_ENABLED: ${ENABLE_GOOGLE_SIGNUP:-false}
      GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOTRUE_EXTERNAL_GOOGLE_SECRET: ${GOOGLE_SECRET:-}
      GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI:-}
      
      TZ: ${TZ:-Asia/Seoul}
    ports:
      - "9999:9999"
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      timeout: 5s
      interval: 5s
      retries: 3

  # ========================================
  # üìä PostgREST API ÏÑúÎ≤Ñ
  # ========================================
  rest:
    image: postgrest/postgrest:v12.0.1
    container_name: supabase_rest
    restart: unless-stopped
    depends_on:
      supabase:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-your_secure_postgres_password}@supabase:5432/${POSTGRES_DB:-postgres}
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS:-public}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters}
      PGRST_DB_USE_LEGACY_GUCS: ${PGRST_DB_USE_LEGACY_GUCS:-false}
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters}
      PGRST_APP_SETTINGS_JWT_EXP: ${JWT_EXPIRY:-3600}
      TZ: ${TZ:-Asia/Seoul}
    ports:
      - "3000:3000"
    networks:
      - supabase_network

  # ========================================
  # üóÑÔ∏è Supabase Meta (Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨)
  # ========================================
  meta:
    image: supabase/postgres-meta:v0.80.0
    container_name: supabase_meta
    restart: unless-stopped
    depends_on:
      supabase:
        condition: service_healthy
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${POSTGRES_DB:-postgres}
      PG_META_DB_USER: ${POSTGRES_USER:-postgres}
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_postgres_password}
      TZ: ${TZ:-Asia/Seoul}
    ports:
      - "8080:8080"
    networks:
      - supabase_network
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
    #   timeout: 5s
    #   interval: 5s
    #   retries: 3

  # ========================================
  # üìÇ Supabase Storage
  # ========================================
  storage:
    image: supabase/storage-api:v1.11.1
    container_name: supabase_storage
    restart: unless-stopped
    depends_on:
      supabase:
        condition: service_healthy
    environment:
      ANON_KEY: ${ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9}
      SERVICE_KEY: ${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-your_secure_postgres_password}@supabase:5432/${POSTGRES_DB:-postgres}
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: stub
      GLOBAL_S3_BUCKET: stub
      ENABLE_IMAGE_TRANSFORMATION: true
      IMGPROXY_URL: http://imgproxy:5001
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - storage_data:/var/lib/storage
    ports:
      - "5002:5000"
    networks:
      - supabase_network
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/status"]
    #   timeout: 5s
    #   interval: 5s
    #   retries: 3

  # ========================================
  # üñºÔ∏è Image Proxy (Ïù¥ÎØ∏ÏßÄ Î≥ÄÌôò)
  # ========================================
  imgproxy:
    image: darthsim/imgproxy:v3.8.0
    container_name: supabase_imgproxy
    restart: unless-stopped
    environment:
      IMGPROXY_BIND: ":5001"
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
      IMGPROXY_USE_ETAG: true
      IMGPROXY_ENABLE_WEBP_DETECTION: ${IMGPROXY_ENABLE_WEBP_DETECTION:-true}
      TZ: ${TZ:-Asia/Seoul}
    volumes:
      - storage_data:/var/lib/storage:ro
    ports:
      - "5001:5001"
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "imgproxy", "health"]
      timeout: 5s
      interval: 5s
      retries: 3

  # ========================================
  # ‚ö° Supabase Realtime
  # ========================================
  realtime:
    image: supabase/realtime:v2.28.32
    container_name: supabase_realtime
    restart: unless-stopped
    depends_on:
      supabase:
        condition: service_healthy
    environment:
      PORT: 4000
      DB_HOST: supabase
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_postgres_password}
      DB_NAME: ${POSTGRES_DB:-postgres}
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters}
      FLY_ALLOC_ID: fly123
      FLY_APP_NAME: realtime
      SECRET_KEY_BASE: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq
      ERL_AFLAGS: -proto_dist inet_tcp
      ENABLE_TAILSCALE: false
      DNS_NODES: "''"
      TZ: ${TZ:-Asia/Seoul}
    ports:
      - "4000:4000"
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/"]
      timeout: 5s
      interval: 5s
      retries: 3

  # ========================================
  # üóÑÔ∏è Supabase Kong API Gateway
  # ========================================
  kong:
    image: kong:3.4.0
    container_name: supabase_kong
    restart: unless-stopped
    depends_on:
      supabase:
        condition: service_healthy
      auth:
        condition: service_healthy
      realtime:
        condition: service_healthy
      meta:
        condition: service_started
      storage:
        condition: service_started
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: bundled
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
      KONG_NGINX_HTTP_CLIENT_BODY_BUFFER_SIZE: 64k
      TZ: ${TZ:-Asia/Seoul}
    ports:
      - "${KONG_HTTP_PORT:-8000}:8000"
      - "${KONG_HTTPS_PORT:-8443}:8443"
    volumes:
      - ./supabase/kong.yml:/var/lib/kong/kong.yml:ro
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3

  # ========================================
  # üõ†Ô∏è Supabase Studio (Í¥ÄÎ¶¨ ÎåÄÏãúÎ≥¥Îìú)
  # ========================================
  studio:
    image: supabase/studio:20240729-ce42139
    container_name: supabase_studio
    restart: unless-stopped
    depends_on:
      kong:
        condition: service_healthy
    environment:
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_postgres_password}
      DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION:-Default Organization}
      DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT:-Default Project}
      SUPABASE_URL: ${API_EXTERNAL_URL:-http://localhost:8000}
      SUPABASE_REST_URL: ${API_EXTERNAL_URL:-http://localhost:8000}/rest/v1/
      SUPABASE_ANON_KEY: ${ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9}
      LOGFLARE_API_KEY: ${LOGFLARE_API_KEY:-}
      LOGFLARE_URL: ${LOGFLARE_URL:-https://api.logflare.app}
      NEXT_PUBLIC_ENABLE_LOGS: true
      TZ: ${TZ:-Asia/Seoul}
    ports:
      - "3001:3000"
    networks:
      - supabase_network
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # ========================================
  # üê≥ n8n ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏóîÏßÑ
  # ========================================
  n8n:
    image: n8nio/n8n:1.100.1
    container_name: n8n_workflow_engine
    restart: unless-stopped
    depends_on:
      supabase:
        condition: service_healthy
      redis:
        condition: service_healthy
      kong:
        condition: service_healthy
    environment:
      # n8n Í∏∞Î≥∏ ÏÑ§Ï†ï
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: ${N8N_PORT:-5678}
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      N8N_EDITOR_BASE_URL: ${N8N_EDITOR_BASE_URL:-http://localhost:5678}
      
      # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï (SQLite ÏÇ¨Ïö©)
      DB_TYPE: sqlite
      DB_SQLITE_DATABASE: /home/node/.n8n/database.sqlite
      
      # ÏõπÌõÖ ÏÑ§Ï†ï
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678/}
      
      # Î≥¥Ïïà ÏÑ§Ï†ï
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-your_32_character_encryption_key_here}
      
      # ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨
      N8N_USER_MANAGEMENT_DISABLED: ${N8N_USER_MANAGEMENT_DISABLED:-true}
      
      # Î°úÍ∑∏ ÏÑ§Ï†ï
      N8N_LOG_LEVEL: ${N8N_LOG_LEVEL:-info}
      
      # ÌÉÄÏûÑÏ°¥ ÏÑ§Ï†ï
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-Asia/Seoul}
      TZ: ${TZ:-Asia/Seoul}
      
      # ÎÖ∏Îìú ÏÑ§Ï†ï
      NODE_ENV: production
      
      # Ï∫êÏãú ÏÑ§Ï†ï (Redis ÏÇ¨Ïö©)
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      
      # Ïã§Ìñâ ÏÑ§Ï†ï
      EXECUTIONS_PROCESS: main
      EXECUTIONS_MODE: queue
      
      # Î≥¥Ïïà Í¥ÄÎ†®
      N8N_SECURE_COOKIE: false
      N8N_DIAGNOSTICS_ENABLED: false
      
      # Supabase Ïó∞ÎèôÏùÑ ÏúÑÌïú ÌôòÍ≤Ω Î≥ÄÏàò
      SUPABASE_URL: ${API_EXTERNAL_URL:-http://localhost:8000}
      SUPABASE_ANON_KEY: ${ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9}
      
    ports:
      - "${N8N_PORT:-5678}:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    networks:
      - supabase_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

# ========================================
# üìÇ Î≥ºÎ•® Ï†ïÏùò
# ========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  storage_data:
    driver: local
  n8n_data:
    driver: local

# ========================================
# üåê ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÏùò
# ========================================
networks:
  supabase_network:
    driver: bridge
    name: supabase_network 